name: "CI"
on: pull_request
jobs:
  plan-infra:
    name: "Plan Infra"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_prod_postgres_password: ${{ secrets.TF_VAR_prod_postgres_password }}
      TF_VAR_prod_postgres_username: ${{ secrets.TF_VAR_prod_postgres_username }}
      TF_VAR_staging_postgres_password: ${{ secrets.TF_VAR_staging_postgres_password }}
      TF_VAR_staging_postgres_username: ${{ secrets.TF_VAR_staging_postgres_username }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
        with:
          # Checkout the current commit instead of the commit that would get
          # made when the PR would be merged, since we want to validate that
          # the branch doesn't contain any merge commits and is rebased correctly.
          # We also fetch all the objects here so that we can do the comparisons.
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: "Check commits of the PR branch"
        run: ./.github/check_commits.sh

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1

      - name: "Terraform fmt"
        id: fmt
        run: terraform fmt -check -diff

      - name: "Terraform init"
        id: init
        run: terraform init

      - name: "Terraform validate"
        id: validate
        run: terraform validate -no-color

      - name: "Terraform plan"
        id: plan
        run: terraform plan -no-color

      - name: "Show plan info in the PR"
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
