name: "CI"

on: pull_request

defaults:
  run:
    working-directory: terraform

jobs:
  plan-infra:
    name: "Plan Infra"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code (pre merge)"
        uses: actions/checkout@v2
        with:
          # Checkout the current commit instead of the commit that would get
          # made when the PR would be merged, since we want to validate that
          # the branch doesn't contain any merge commits and is rebased correctly.
          # We also fetch all the objects here so that we can do the comparisons.
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: "Check commits of the PR branch"
        run: ../.github/check_commits.sh

      - name: "Checkout code (post merge)"
        uses: actions/checkout@v2

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@cefc5912bc61e2b5a3b049c839fc283c7712d4e0  # v1.5.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec  # 1.3.2

      - name: "Terraform fmt"
        id: fmt
        run: terraform fmt -check -diff

      - name: "Terraform init"
        id: init
        run: terraform init

      - name: "Terraform validate"
        id: validate
        run: terraform validate -no-color

      - name: "Set dynamic env variables"
        run: >
          echo "TF_VAR_prod_backend_latest_tag=$(../.github/get_latest_ecr_tag.sh backend-prod)" >> $GITHUB_ENV
          && echo "TF_VAR_prod_frontend_latest_tag=$(../.github/get_latest_ecr_tag.sh frontend-prod)" >> $GITHUB_ENV
          && echo "TF_VAR_staging_backend_latest_tag=$(../.github/get_latest_ecr_tag.sh backend-staging)" >> $GITHUB_ENV
          && echo "TF_VAR_staging_frontend_latest_tag=$(../.github/get_latest_ecr_tag.sh frontend-staging)" >> $GITHUB_ENV

      - name: "Terraform plan"
        id: plan
        run: terraform plan -no-color -input=false
        env:
          TF_VAR_prod_postgres_password: ${{ secrets.TF_VAR_prod_postgres_password }}
          TF_VAR_prod_postgres_username: ${{ secrets.TF_VAR_prod_postgres_username }}
          TF_VAR_prod_public_key: ${{ secrets.TF_VAR_prod_public_key }}
          TF_VAR_staging_postgres_password: ${{ secrets.TF_VAR_staging_postgres_password }}
          TF_VAR_staging_postgres_username: ${{ secrets.TF_VAR_staging_postgres_username }}
          TF_VAR_staging_public_key: ${{ secrets.TF_VAR_staging_public_key }}

      - name: "Show plan info in the PR"
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
